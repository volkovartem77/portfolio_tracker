import React, { useEffect, useRef, useState } from "react";
import { createChart, ColorType } from "lightweight-charts";

export const PortfolioChart = ({ data, loadMoreHistory }) => {
  const chartContainerRef = useRef();
  const chartRef = useRef(null);
  const seriesRef = useRef(null);
  const dataRef = useRef(data); // –°–æ–∑–¥–∞—ë–º —Ä–µ—Ñ
  const hasReachedEndRef = useRef(false); // –°–ª–µ–¥–∏–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –∫–æ–Ω—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
  
  
  useEffect(() => {
    dataRef.current = data;
  }, [data]); // –û–±–Ω–æ–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  
  const earliestLoadedTimeRef = useRef(null); // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º useRef
  const [isLoading, setIsLoading] = useState(false);
  
  useEffect(() => {
    if (!chartContainerRef.current) return;
    
    // ‚ùó –û–ë–ù–£–õ–Ø–ï–ú –§–õ–ê–ì –∫–æ–Ω—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
    hasReachedEndRef.current = false;
    // console.log("‚ôªÔ∏è –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–æ–Ω—Ü–∞ –¥–∞–Ω–Ω—ã—Ö");
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
    if (chartRef.current) {
      chartRef.current.remove();
      chartRef.current = null;
      seriesRef.current = null;
    }
    
    console.log("üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫...");
    
    chartRef.current = createChart(chartContainerRef.current, {
      layout: {
        background: { type: ColorType.Solid, color: "white" },
        textColor: "black",
      },
      width: chartContainerRef.current.clientWidth,
      height: 400,
    });
    
    seriesRef.current = chartRef.current.addCandlestickSeries();
    chartRef.current.timeScale().fitContent();
    
    if (data.length > 0) {
      earliestLoadedTimeRef.current = data[0].time; // ‚úÖ –¢–µ–ø–µ—Ä—å ref —Ö—Ä–∞–Ω–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      // console.log("üìå setEarliestLoadedTime", earliestLoadedTimeRef.current);
    }
    
    const handleResize = () => {
      if (chartRef.current) {
        chartRef.current.applyOptions({ width: chartContainerRef.current.clientWidth });
      }
    };
    window.addEventListener("resize", handleResize);
    
    const handleTimeRangeChange = (range) => {
      // console.log("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏...");
      // console.log(range, isLoading, earliestLoadedTimeRef.current, hasReachedEndRef.current); // ‚úÖ –ë–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ ref
      
      if (!range || isLoading || !earliestLoadedTimeRef.current || hasReachedEndRef.current) return;
      
      const minTime = Math.min(...dataRef.current.map((c) => c.time));
      
      // console.log(`üîç minTime=${minTime}, visible.to=${range.to}, earliestLoadedTime=${earliestLoadedTimeRef.current}`);
      
      if (range.to < earliestLoadedTimeRef.current + 100 * 86400) {
        // console.log(`‚è≥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö (${minTime}), –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é...`);
        setIsLoading(true);
        
        loadMoreHistory(minTime).then((newEarliestTime) => {
          // console.log("üîÑ newEarliestTime", newEarliestTime);
          
          if (newEarliestTime === undefined) {
            console.log("üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.");
            hasReachedEndRef.current = true; // –ë–æ–ª—å—à–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            setIsLoading(false);
            return;
          }
          
          if (newEarliestTime && newEarliestTime < earliestLoadedTimeRef.current) {
            earliestLoadedTimeRef.current = newEarliestTime; // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º ref
          }
          setIsLoading(false);
        });
      }
    };
    
    chartRef.current.timeScale().subscribeVisibleTimeRangeChange(handleTimeRangeChange);
    
    return () => {
      // console.log("‚ùå –ì—Ä–∞—Ñ–∏–∫ —É–¥–∞–ª—ë–Ω");
      window.removeEventListener("resize", handleResize);
      if (chartRef.current) {
        chartRef.current.timeScale().unsubscribeVisibleTimeRangeChange(handleTimeRangeChange);
        chartRef.current.remove();
        chartRef.current = null;
      }
    };
  }, []);
  
  // useEffect(() => {
  //   console.log("üìå earliestLoadedTime –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", earliestLoadedTimeRef.current);
  // });
  
  useEffect(() => {
    if (!seriesRef.current || !data || data.length === 0) return;
    
    console.log("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞, –ø–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:", data.length);
    
    const sortedData = [...data].sort((a, b) => a.time - b.time);
    seriesRef.current.setData(sortedData);
  }, [data]);
  
  return <div ref={chartContainerRef} style={{ width: "100%", height: "400px" }} />;
};